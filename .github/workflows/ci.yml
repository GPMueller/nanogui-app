name: CI

on: [push, pull_request]

jobs:

  desktop-app:
    runs-on: ${{ matrix.os }}
    name: desktop-app ${{ matrix.name-suffix }} (${{ matrix.os }}, ${{ matrix.build-type }})
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        build-type: [Release, Debug]
    env:
      BUILD_TYPE: ${{ matrix.build-type }}

    steps:
    - uses: actions/checkout@v2

    - name: Install required system packages ðŸ“š
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt update
        sudo apt install xorg-dev libglu1-mesa-dev

    - name: Create build folder
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Configure âš™
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE

    - name: Build ðŸ› 
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: |
        cmake --build . --config $BUILD_TYPE -j 2
        cmake --build . --config $BUILD_TYPE -j 2 --target install
        cmake --build . --config $BUILD_TYPE -j 2 --target package

    - name: Archive ubuntu package ðŸ“¦
      if: matrix.os == 'ubuntu-latest' && matrix.build-type == 'Release'
      uses: actions/upload-artifact@v2
      with:
        name: nanogui-app-ubuntu
        path: |
          ${{runner.workspace}}/build/*.zip

    - name: Archive macos package ðŸ“¦
      if: matrix.os == 'macos-latest' && matrix.build-type == 'Release'
      uses: actions/upload-artifact@v2
      with:
        name: nanogui-app-macos
        path: |
          ${{runner.workspace}}/build/*.dmg
          ${{runner.workspace}}/build/install/*
          ! ${{runner.workspace}}/build/install/*.app

    - name: Archive windows package ðŸ“¦
      if: matrix.os == 'windows-latest' && matrix.build-type == 'Release'
      uses: actions/upload-artifact@v2
      with:
        name: nanogui-app-windows
        path: |
          ${{runner.workspace}}/build/*.zip

  web-app:
    runs-on: ubuntu-20.04
    env:
      BUILD_TYPE: Release
      EMSCRIPTEN_VERSION: "1.39.20"

    steps:
    - uses: actions/checkout@v2

    - name: Install required system packages ðŸ“š
      if: matrix.os == 'ubuntu-20.04'
      run: |
        sudo apt update
        sudo apt install xorg-dev libglu1-mesa-dev

    - name: Install Emscripten ðŸ“š
      shell: bash
      working-directory: ${{runner.workspace}}
      run: |
        git clone https://github.com/emscripten-core/emsdk.git
        cd emsdk
        ./emsdk install $EMSCRIPTEN_VERSION
        ./emsdk activate $EMSCRIPTEN_VERSION

    - name: Create build folder
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Configure âš™
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: |
        source ${{runner.workspace}}/emsdk/emsdk_env.sh
        cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_TOOLCHAIN_FILE=${{runner.workspace}}/emsdk/upstream/emscripten/cmake/Modules/Platform/Emscripten.cmake

    - name: Build ðŸ› 
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: |
        source ${{runner.workspace}}/emsdk/emsdk_env.sh
        cmake --build . --config $BUILD_TYPE -j 2

    - name: Archive web app ðŸ“¦
      uses: actions/upload-artifact@v2
      with:
        name: nanogui-app-web
        path: webapp/

    - name: Deploy web app ðŸš€
      if: github.event_name == 'push' && startsWith( github.ref, 'refs/tags/' )
      uses: JamesIves/github-pages-deploy-action@3.7.1
      with:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        BRANCH: gh-pages
        FOLDER: webapp
        CLEAN: true

  draft-release:
    if: github.event_name == 'push' && startsWith( github.ref, 'refs/tags/' )
    needs: [desktop-app, web-app]
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:

    - name: Create draft release ðŸŽ‰
      id: draft_release
      uses: actions/create-release@v1
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: true

    - uses: actions/download-artifact@master
      id: download_artifacts

    - name: Pack macOS and web zips ðŸ“¦
      shell: bash
      run: |
        ls -R
        pwd
        echo ${{ github.event.ref }}
        echo ${{ github.event.release.tag_name }}
        tag_name=${{ github.event.release.tag_name }}
        pattern=${{ steps.download_artifacts.outputs.download-path }}/nanogui-app-ubuntu/*.zip
        files=($pattern)
        echo "ubuntu_zip=${files[0]}" >> $GITHUB_ENV
        echo "pattern=$pattern"
        echo "files=$files"
        echo "ubuntu_zip=${{ env.ubuntu_zip }}"
        pattern=${{ steps.download_artifacts.outputs.download-path }}/nanogui-app-windows/*.zip
        files=($pattern)
        echo "windows_zip=${files[0]}" >> $GITHUB_ENV
        echo "pattern=$pattern"
        echo "files=$files"
        echo "windows_zip=${{ env.windows_zip }}"
        echo "GH Env: $GITHUB_ENV"
        version_tag=${tag_name#refs/*/}
        echo "version_tag=$version_tag" >> $GITHUB_ENV
        echo "Release version $version_tag"
        cd ${{ steps.download_artifacts.outputs.download-path }}/nanogui-app-macos
        zip -r ${{runner.workspace}}/macos-app.zip *
        cd ${{ steps.download_artifacts.outputs.download-path }}/nanogui-app-web
        zip -r ${{runner.workspace}}/web-app.zip *

    - name: Release Linux desktop app ðŸš€
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.draft_release.outputs.upload_url }}
        asset_path: ${{ env.ubuntu_zip }}
        asset_name: desktop-app-${{ env.version_tag }}-linux.zip
        asset_content_type: application/zip

    - name: Release macOS desktop app ðŸš€
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.draft_release.outputs.upload_url }}
        asset_path:  ${{runner.workspace}}/macos-app.zip
        asset_name: desktop-app-${{ env.version_tag }}-macos.zip
        asset_content_type: application/zip

    - name: Release Windows desktop app ðŸš€
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.draft_release.outputs.upload_url }}
        asset_path: ${{ env.windows_zip }}
        asset_name: desktop-app-${{ env.version_tag }}-windows.zip
        asset_content_type: application/zip

    - name: Release web app ðŸš€
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.draft_release.outputs.upload_url }}
        asset_path:  ${{runner.workspace}}/web-app.zip
        asset_name: web-app-${{ env.version_tag }}.zip
        asset_content_type: application/zip