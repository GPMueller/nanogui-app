name: CI

on: [push, pull_request]

jobs:

  desktop-app:
    runs-on: ${{ matrix.os }}
    name: test${{ matrix.name-suffix }} (${{ matrix.os }}, ${{ matrix.build-type }})
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        build-type: [Release, Debug]
    env:
      BUILD_TYPE: ${{ matrix.build-type }}

    steps:
    - uses: actions/checkout@v2

    - name: Install required system packages ðŸ“š
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt update
        sudo apt install xorg-dev libglu1-mesa-dev

    - name: Create build folder
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Configure âš™
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE

    - name: Build ðŸ› 
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: |
        cmake --build . --config $BUILD_TYPE -j 2
        cmake --build . --config $BUILD_TYPE -j 2 --target install
        cmake --build . --config $BUILD_TYPE -j 2 --target package

    - name: Archive ubuntu package ðŸ“¦
      if: matrix.os == 'ubuntu-latest' && matrix.build-type == 'Release'
      uses: actions/upload-artifact@v2
      with:
        name: nanogui-app-ubuntu
        path: |
          ${{runner.workspace}}/build/*.tar.gz

    - name: Archive macos package ðŸ“¦
      if: matrix.os == 'macos-latest' && matrix.build-type == 'Release'
      uses: actions/upload-artifact@v2
      with:
        name: nanogui-app-macos
        path: |
          ${{runner.workspace}}/build/*.dmg
          ${{runner.workspace}}/build/install/README.md
          ${{runner.workspace}}/build/install/License.txt
          ${{runner.workspace}}/build/install/Licenses/

    - name: Archive windows package ðŸ“¦
      if: matrix.os == 'windows-latest' && matrix.build-type == 'Release'
      uses: actions/upload-artifact@v2
      with:
        name: nanogui-app-windows
        path: |
          ${{runner.workspace}}/build/*.zip

  web-app:
    runs-on: ubuntu-20.04
    env:
      BUILD_TYPE: Release
      EMSCRIPTEN_VERSION: "1.39.20"

    steps:
    - uses: actions/checkout@v2

    - name: Install required system packages ðŸ“š
      if: matrix.os == 'ubuntu-20.04'
      run: |
        sudo apt update
        sudo apt install xorg-dev libglu1-mesa-dev

    - name: Install Emscripten ðŸ“š
      working-directory: ${{runner.workspace}}
      run: |
        git clone https://github.com/emscripten-core/emsdk.git
        cd emsdk
        ./emsdk install $EMSCRIPTEN_VERSION
        ./emsdk activate $EMSCRIPTEN_VERSION

    - name: Create build folder
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Configure âš™
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: |
        source ${{runner.workspace}}/emsdk/emsdk_env.sh
        cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_TOOLCHAIN_FILE=${{runner.workspace}}/emsdk/upstream/emscripten/cmake/Modules/Platform/Emscripten.cmake

    - name: Build ðŸ› 
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: |
        source ${{runner.workspace}}/emsdk/emsdk_env.sh
        cmake --build . --config $BUILD_TYPE -j 2

    - name: Archive web app ðŸ“¦
      uses: actions/upload-artifact@v2
      with:
        name: nanogui-app-web
        path: webapp/

    - name: Deploy ðŸš€
      if: github.event_name != 'pull_request'
      uses: JamesIves/github-pages-deploy-action@3.7.1
      with:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        BRANCH: gh-pages
        FOLDER: webapp
        CLEAN: true